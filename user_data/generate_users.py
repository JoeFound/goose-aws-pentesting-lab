# import pyyaml module
import yaml
import os
import secrets, string
from yaml.loader import SafeLoader    
from pywgkey import WgKey
from sshkey_tools.keys import RsaPrivateKey
import base64


NUMBER_OF_USERS=5
USERS_FILE = 'users.yml'
#Â Replace this with a valid <name>.duckdns.org domain
SERVER_DNS_NAME="m8lab.duckdns.org"

letters = string.ascii_letters
digits = string.digits
special_chars = "%=_.+"
alphabet = letters + digits + special_chars
pwd_length = 16

def generate_password():
    pwd = ''
    for i in range(pwd_length):
        pwd += ''.join(secrets.choice(alphabet))
    return(pwd)


# def generate_rsa_keys():
#     rsa_priv = RsaPrivateKey.generate(2048)
#     rsa_priv_export = rsa_priv.to_string()
#     rsa_pub_export = rsa_priv.public_key.serialize().decode('utf-8')
#     return(rsa_priv_export,rsa_pub_export)
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.backends import default_backend
def generate_rsa_keys():
    # generate private/public key pair
    key = rsa.generate_private_key(backend=default_backend(), 
                                   public_exponent=65537,
                                   key_size=2048)

    # get public key in OpenSSH format
    public_key = key.public_key().public_bytes(serialization.Encoding.OpenSSH, \
        serialization.PublicFormat.OpenSSH)

    # get private key in PEM container format
    pem = key.private_bytes(encoding=serialization.Encoding.PEM,
        format=serialization.PrivateFormat.TraditionalOpenSSL,
        encryption_algorithm=serialization.NoEncryption())

    # decode to printable strings
    private_key_str = pem.decode('utf-8')
    public_key_str = public_key.decode('utf-8')
    
    return(private_key_str,public_key_str)

dump=False

if os.path.exists(USERS_FILE):
    # Open the file and load the file
    with open(USERS_FILE) as f:
        data = yaml.load(f, Loader=SafeLoader)
        for item in data["users"]:
            # Generate Passwords
            try: 
                if not len(item["password"]) > 0:
                    dump=True
                    item["password"] = generate_password()
            except:
                dump=True
                item["password"] = generate_password() 
            # Generate Wiregards keys
            try: 
                key = WgKey()
                if item["wireguard_keys"] is None or len(item["wireguard_keys"]) == 0:
                    dump=True 
                    item['wireguard_keys']= dict(private=key.privkey, public=key.pubkey)
            except:
                dump=True       
                item['wireguard_keys']= dict(private=key.privkey, public=key.pubkey)

else:
    # Generate all the user data
    dump=True
    
    data = dict(server={}, users=[])
    # Server Data
    server_key = WgKey()
    data["server"]["dnsname"] = SERVER_DNS_NAME
    data["server"]["wireguard_keys"] = dict(private=server_key.privkey, public=server_key.pubkey)
    
    # User Data
    for i in range(NUMBER_OF_USERS):
        key = WgKey()
        ssh_priv, ssh_pub = generate_rsa_keys()
        data["users"].append(dict(
            name="user"+str(i+1),
            password=generate_password(),
            wireguard_keys= dict(private=key.privkey, public=key.pubkey),
            ssh_keys= dict(private=ssh_priv, public=ssh_pub )
        ))



if dump:
    print(" --- Saving user data to users.yaml ---")
    with open(USERS_FILE, 'w') as file:
        yaml.dump(data, file)
        

        
        





    
    





